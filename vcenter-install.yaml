---
- name: Generate a KVM enabled VMWare VCSA VM under libvirt
  #hosts: somehost
  hosts: libvirt-host
  become: true
  vars:
    vcsaiso: 'VMware-VCSA-all-6.7.0-13010631.iso'
    vcsapath: '/data/isos/'
    vcsaprefix: 'vcsa1'
    libvirt:
       name: 'vcsa1'
       pool: 'vms'
       # Use network named network_name
       network_type: 'network'
       network_name: 'default'
       # Use bridge named network_name
       #network_type: 'bridge'
       #network_name: 'br0'
    macaddr: '52:54:00:00:00:01'
    disks:
       disk1: 12288
       disk2: 1843
       disk3: 25600
       disk4: 25600
       disk5: 10240
       disk6: 10240
       disk7: 15360
       disk8: 10240
       disk9: 1024
       disk10: 10240
       disk11: 10240
       disk12: 102400
       disk13: 51200
  tasks:
    - name: Load common role
      import_role:
        name: vcsa_common
      tags:
        - common
    - name: Ensure required packages are installed
      package: 
        name: "{{ vcsa_packages }}" 
        state: present

    - name: Try to find vmdk files to skip bsdtar / tar step...
      find:
        paths: "{{ vcsa_tmpdir }}"
        patterns: '*.vmdk'
      register: vmdk_files
      tags:
        - vmdk

    - name: Set initial first found vmdk
      set_fact: first_vmdk_found="{{ vmdk_files.files | default([{'path':'blubb'}]) }}"

    - name: Extract iso to stdout and untar ova directly into "{{ vcsa_tmpdir }}"
      shell: bsdtar -xvOf {{ vcsapath }}{{ vcsaiso }} vcsa/*.ova | tar xv -C "{{ vcsa_tmpdir }}"/ -xvf -
      args:
        creates: "{{ first_vmdk_found }}"

    - name: Find vmdk files
      find:
        paths: "{{ vcsa_tmpdir }}"
        patterns: '*.vmdk'
      register: vmdk_files
      tags:
        - vmdk

    - name: Convert vmdks to qcows...
      shell: qemu-img convert -O qcow2  "{{ item.path }}" "{{ item.path.replace('.vmdk', '') }}.qcow2"
      loop:
        "{{ vmdk_files.files }}"
      loop_control:
        index_var: index
      tags:
        - vmdk

    - name: Create empty disk images
      shell: virsh -c qemu:///system vol-create-as {{libvirt.pool}} {{libvirt.name}}-{{item.key}}.qcow2 {{item.value}}M --format qcow2
      with_dict: '{{ disks }}'
      tags: libvirt
    - name: Import disks into the {{libvirt.pool}}
      shell: virsh -c qemu:///system  vol-upload --pool {{libvirt.pool}} {{libvirt.name}}-disk{{ index }}.qcow2 "{{ item }}"
      tags: libvirt
      with_fileglob:
        "{{ vcsa_tmpdir }}/*.qcow2"
      loop_control:
        index_var: index
    - name: Create the VCSA VM
      shell: virt-install --connect qemu:///system -n {{libvirt.name}} --ram 10240 --vcpus 4 --cpu host-passthrough --import --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk1.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk2.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk3.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk4.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk5.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk6.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk7.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk8.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk9.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk10.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk11.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk12.qcow2,bus=sata --disk vol={{libvirt.pool}}/{{libvirt.name}}-disk13.qcow2,bus=sata  --os-variant sles11 --network model=e1000,{{libvirt.network_type}}={{libvirt.network_name}},mac={{ macaddr }} --wait 0
      tags: libvirt
